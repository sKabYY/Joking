Expr := Var
      | Base<Expr>
      | (func Pat Expr Expr*)
      | (if Expr Expr Expr)
      | (match Expr Clause Clause*)
      | (begin Expr*)
      | 'Symb<Expr>
      | (quote Symb<Expr>) ; = 'Symb<Expr>
      | (define Var Expr)
      | (set! Var Expr)
      | (apply Expr Expr)
      | (Expr Expr*) ; This is the last expression.

Base<T> := Int ; 1, 2, 3, ...
         | Bool ; #t and #f
         | Float ; 1.0, 0.1 ...
         | String ; "balabala"
         | [T*] ; a list

Int: starts with +, - or digit
Float: starts with +, -, ., or digit
Var: Letter(+, -, *, /, ?, !, _, :, ., and alpha)
     Letter(Letter|Digit)*

Clause := (Pat Expr)
        | (else Expr) ; else is always true
      
Symb<T> := Symbol
         | Base
         | ,T
         | ()
         | (Symb<T> . Symb<T>)
         | (Symb<T> Symb<T>*) ; = (s1 . (s2 . (s3 . ...())))

Symbol: the same as Var
      
Pat  := _ ; match anything
      | Var
      | Base<Pat>
      | (? Expr Var)
      | 'Symb<Pat>
      | (Pat Pat*)
     
;;;

Primitive Procedure: +, -, *, /, iszero?, print